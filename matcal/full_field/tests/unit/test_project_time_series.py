
from matcal.full_field.data_importer import FieldSeriesData, ImportedTwoDimensionalMesh
import numpy as np
import os
import shutil

from matcal.full_field.TwoDimensionalFieldGrid import auto_generate_two_dimensional_field_grid
from matcal.core.tests.MatcalUnitTest import MatcalUnitTest
from matcal.full_field.series_projector import AutoGeneratedCSVFieldSeriesProjector, \
    TwoDimensionalFieldSeriesProjector


class TestSmallTwoDimensionalFieldSeriesProjector(MatcalUnitTest):

    def setUp(self):
        super().setUp(__file__)
        self._global_field_data_csv = self.get_current_files_path(__file__) + "/input_files/global_test_data.csv"
        self._series_directory = self.get_current_files_path(__file__) + "/input_files/dic_csv"
        number_nodes_x = 3
        number_nodes_y = 3
        series_data = FieldSeriesData(self._global_field_data_csv,
                                    self._series_directory, ['X', 'Y'])

        self._target = auto_generate_two_dimensional_field_grid(number_nodes_x, number_nodes_y, series_data)
        self.series_projector = AutoGeneratedCSVFieldSeriesProjector(
            series_data, number_nodes_x,
            number_nodes_y)

    def test_create_target_grid(self):
        self.assertEqual(self._target.node_count, 9)
        self.assertEqual(self._target.cell_count, 4)
        buffer = 1e-10
        buff_up = 1 + buffer
        buff_down = 1 - buffer
        self.assertAlmostEqual(np.min(self._target.node_positions[:, 0]), 0)
        self.assertAlmostEqual(np.min(self._target.node_positions[:, 1]), 1 * buff_down)
        self.assertAlmostEqual(np.max(self._target.node_positions[:, 0]), 1. * buff_up)
        self.assertAlmostEqual(np.max(self._target.node_positions[:, 1]), 3. * buff_up)

    def test_project_time_constant_field(self):
        self.series_projector.project_fields(self._target, "T")
        goal = np.ones(9) * 300
        for i in range(3):
            data = self.series_projector.get_frame_data(i)
            self.assert_close_arrays(data["T"], goal)

    def test_project_a_time_dependent_field(self):
        self.series_projector.project_fields(self._target, "Ux")
        x = self._target.node_positions[:, 0]
        for i in range(3):
            data = self.series_projector.get_frame_data(i)
            goal = x * .1 * i
            self.assert_close_arrays(data["Ux"], goal)

    def test_get_projection_field_names(self):
        fields = ["Ux", "T", "Uy"]
        self.series_projector.project_fields(self._target, *fields)
        self.assertEqual(len(fields), len(self.series_projector.get_field_names()))
        proj_field_names = self.series_projector.get_field_names()
        for f in proj_field_names:
            self.assertIn(f, fields)

    def test_project_a_collection_of_fields(self):
        self.series_projector.project_fields(self._target, "Ux", "T", "Uy")
        x = self._target.node_positions[:, 0]
        y = self._target.node_positions[:, 1]
        goal_T = np.ones(9) * 300
        for i in range(3):
            data = self.series_projector.get_frame_data(i)
            goal_ux = x * .1 * i
            goal_uy = (2. - y) * .025 * i

            self.assert_close_arrays(data["Ux"], goal_ux)
            self.assert_close_arrays(data["Uy"], goal_uy)
            self.assert_close_arrays(data["T"], goal_T)

    def test_only_store_last_projection(self):
        self.series_projector.project_fields(self._target, "T")
        self.series_projector.project_fields(self._target, "Ux")
        x = self._target.node_positions[:, 0]
        y = self._target.node_positions[:, 1]
        goal_T = np.ones(9) * 300
        for i in range(3):
            data = self.series_projector.get_frame_data(i)
            goal_ux = x * .1 * i
            goal_uy = (2. - y) * .025 * i
        with self.assertRaises(ValueError):
            self.assert_close_arrays(data["T"], goal_T)

class TestLargeTwoDimensionalFieldSeriesProjector(MatcalUnitTest):

    def setUp(self):
        super().setUp(__file__)
        self._global_field_data_csv = self.get_current_files_path(__file__) + "/input_files/larger_global_test_data.csv"
        self._series_directory = self.get_current_files_path(__file__) + "/input_files/dic_csv"
        number_nodes_x = 20
        number_nodes_y = 20
        series_data = FieldSeriesData(self._global_field_data_csv, self._series_directory)
        self._target = auto_generate_two_dimensional_field_grid(number_nodes_x, number_nodes_y, series_data)

        self.series_projector = AutoGeneratedCSVFieldSeriesProjector(series_data,
                                number_nodes_x, number_nodes_y)

    def test_project_a_collection_of_fields(self):
        self.series_projector.project_fields(self._target, "Ux", "T", "Uy")
        x = self._target.node_positions[:, 0]
        y = self._target.node_positions[:, 1]
        goal_T = np.ones(np.size(x)) * 300
        for i in range(3):
            data = self.series_projector.get_frame_data(i)
            goal_ux = x * .1 * i
            goal_uy = (2. - y) * .025 * i
            self.assert_close_arrays(data["Ux"], goal_ux)
            self.assert_close_arrays(data["Uy"], goal_uy)
            self.assert_close_arrays(data["T"], goal_T)


class TestImportedFieldSeriesProjector(MatcalUnitTest):

    def setUp(self):
        super().setUp(__file__)

    def test_project_fields(self):
        series_directory = "/".join([self.get_current_files_path(__file__), "input_files", "cut_plate"])
        global_data_file = series_directory + "/adv_plastic_linear_global.csv"
        reference_meshfile = "/".join([self.get_current_files_path(__file__), 'input_files', 'flat_surface.json'])
        target = ImportedTwoDimensionalMesh(reference_meshfile)
        series_data = FieldSeriesData(global_data_file, series_directory)
        projector = TwoDimensionalFieldSeriesProjector(series_data)
        projector.project_fields(target, "Ux")
        results = projector.get_frame_data(0)
        x = target.node_positions[:, 0]

        goal_Ux = .1 * x
        self.assert_close_arrays(results['Ux'], goal_Ux)


