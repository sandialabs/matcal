from abc import ABC, abstractmethod
from matcal.core import serializer_wrapper
from matcal.core.constants import TIME_KEY
import numpy as np

from matcal.core.data import convert_dictionary_to_data
from matcal.core.state import SolitaryState
from matcal.full_field.TwoDimensionalFieldGrid import GridAxis
from matcal.full_field.field_mappers import _TwoDimensionalFieldProjector
from matcal.core.logger import initialize_matcal_logger

logger = initialize_matcal_logger(__name__)


def load_saved_projector(projector_filename):
    with open(projector_filename, 'rb') as pf:
        projector = serializer_wrapper.pickle_serializer.load(pf)
    return projector


class SeriesProjectorBase(ABC):

    @abstractmethod
    def _projector_class(self):
        """"""

    def __init__(self, field_data):
        self._field_data = field_data
        self._projected_data = None
        self._x_axis_name = "X"
        self._y_axis_name = "Y"

        self._projected_field_names = []
        self._state = SolitaryState()

    def project_fields(self, target, *fields_to_project):
        logger.info("\t\tProjecting Fields. This may take a moment.")
        projector =  self._projector_class(self._field_data, target)
        self._projected_data = self._initialize_projection_results(self._field_data.length, target.node_count, fields_to_project)
        for frame_index in range(self._field_data.length):
            logger.debug(f"Projecting Frame {frame_index + 1} out of {self._field_data.length}")
            for field in fields_to_project:
                logger.debug(f"Projecting: {field}")
                projector.project_field(field, frame_index)
                self._projected_data[field][frame_index,:] = projector.get_results_data()[field]
        self._projected_data[TIME_KEY]  = self._field_data[TIME_KEY]
        self._projected_field_names += fields_to_project
        return self._projected_data

    def _initialize_projection_results(self, n_time, n_points, field_names_list):
        data_dict = {}
        for name in field_names_list:
            data_dict[name] = np.zeros((n_time, n_points))
        data_dict[TIME_KEY] = np.zeros((n_time))
        return convert_dictionary_to_data(data_dict)

    def _is_frame_already_projected(self, frame_index):
        frame_already_projected = frame_index < len(self._projected_data.get_frame_order())
        return frame_already_projected

    def get_frame_data(self, frame_index):
        return self._projected_data[frame_index]

    def get_all_frame_data(self):
        return self._projected_data

    def _get_two_dimensional_field_range(self):
        range_x = self._get_field_range(0)
        range_y = self._get_field_range(1)
        return range_x, range_y

    def _get_field_range(self, dimension_index):
        upper_bound = np.max(self._field_data.spatial_coords[:, dimension_index])
        lower_bound = np.min(self._field_data.spatial_coords[:, dimension_index])
        return np.array([lower_bound, upper_bound])

    def save(self, filename):
        with open(filename, 'wb') as dill_file:
            serializer_wrapper.dump(self, dill_file)

    @property
    def state(self):
        return self._state

    @property
    def field_names(self):
        return self.get_field_names()
        
    def get_field_names(self):
        return self._projected_field_names


class AutoGeneratedCSVFieldSeriesProjector(SeriesProjectorBase):
    _projector_class = _TwoDimensionalFieldProjector
    _range_buffer = 1e-10

    def __init__(self, field_data, number_of_nodes_x, number_of_nodes_y):
        self._axis_node_count = [number_of_nodes_x, number_of_nodes_y]
        super().__init__(field_data, )

    def _create_reference_target(self):
        range_x, range_y = self._get_buffered_axis_range()
        axis_x, axis_y = self._generate_axis_space(range_x, range_y)
        self._reference_target = self._target_grid_class(axis_x, axis_y)

    def _generate_axis_space(self, range_x, range_y):
        axis_x = GridAxis(range_x[0], range_x[1], self._axis_node_count[0])
        axis_y = GridAxis(range_y[0], range_y[1], self._axis_node_count[1])
        return axis_x, axis_y

    def _get_buffered_axis_range(self):
        range_x, range_y = self._get_two_dimensional_field_range()
        range_x = self._buffer_range(range_x)
        range_y = self._buffer_range(range_y)
        return range_x, range_y

    def _buffer_range(self, axis_range):
        axis_range[0] = self._apply_lower_buffer(axis_range[0])
        axis_range[1] = self._apply_upper_buffer(axis_range[1])
        return axis_range

    def _apply_lower_buffer(self, coordinate):
        if coordinate < 0:
            return coordinate * (1 + self._range_buffer)
        else:
            return coordinate * (1 - self._range_buffer)

    def _apply_upper_buffer(self, coordinate):
        if coordinate < 0:
            return coordinate * (1 - self._range_buffer)
        else:
            return coordinate * (1 + self._range_buffer)

    def get_field_names(self):
        return self._projected_field_names


class TwoDimensionalFieldSeriesProjector(SeriesProjectorBase):
    _projector_class = _TwoDimensionalFieldProjector



