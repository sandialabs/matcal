
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced_examples/6061T6_anisotropic_calibration/plot_6061T6_i_uq_validation_parameter_study.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_examples_6061T6_anisotropic_calibration_plot_6061T6_i_uq_validation_parameter_study.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_examples_6061T6_anisotropic_calibration_plot_6061T6_i_uq_validation_parameter_study.py:


6061T6 aluminum uncertainty quantification validation
-----------------------------------------------------
In this example, we will use MatCal's :class:`~matcal.core.parameter_studies.ParameterStudy`
to validate the estimated parameter uncertainty for the calibration. 
We do this by generating samples from the fitted covariance from 
:ref:`6061T6 aluminum calibration with anisotropic yield` and 
running the calibrated models with these samples. Then the 
model results are compared to the data to see how well the sampled parameter 
sets allow the models to represent the data uncertainty. 

.. note::
    Useful Documentation links:

    #. :ref:`Uniaxial Tension Models`
    #. :ref:`Top Hat Shear Model`
    #. :class:`~matcal.core.parameter_studies.ParameterStudy`
    #. :func:`~matcal.core.parameter_studies.sample_multivariate_normal`
            
To begin, we import the tools we need for this study and setup the 
data and model as we did in :ref:`6061T6 aluminum calibration with anisotropic yield`.

.. GENERATED FROM PYTHON SOURCE LINES 23-157

.. code-block:: Python


    from matcal import *
    from matcal.sandia.computing_platforms import is_sandia_cluster, get_sandia_computing_platform

    import numpy as np
    import matplotlib.pyplot as plt

    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')
    plt.rc('font', size=12)
    figsize = (4,3)

    tension_data_collection = BatchDataImporter("ductile_failure_aluminum_6061_data/" 
                                                  "uniaxial_tension/processed_data/"
                                                  "cleaned_[CANM]*.csv",).batch

    down_selected_tension_data = DataCollection("down selected data")
    for state in tension_data_collection.keys():
        for index, data in enumerate(tension_data_collection[state]):
            stresses = data["engineering_stress"]
            strains = data["engineering_strain"]    
            peak_index = np.argmax(stresses)
            peak_strain = strains[peak_index]
            peak_stress = stresses[peak_index]
            data_to_keep = (((strains>peak_strain) & (stresses > 0.89*peak_stress)) | 
                            (strains>0.005) & (strains < peak_strain))
            down_selected_tension_data.add(data[data_to_keep])

    down_selected_tension_data = scale_data_collection(down_selected_tension_data, 
                                                       "engineering_stress", 1000)
    down_selected_tension_data.remove_field("time")

    material_filename = "hill_plasticity_temperature_dependent.inc"
    material_model = "hill_plasticity"
    material_name = "ductile_failure_6061T6"
    sierra_material = Material(material_name, material_filename, material_model)

    gauge_radius = 0.125
    element_size = gauge_radius/8
    geo_params = {"extensometer_length": 1.0,
                  "gauge_length": 1.25,
                  "gauge_radius": gauge_radius,
                  "grip_radius": 0.25,
                  "total_length": 4,
                  "fillet_radius": 0.188,
                  "taper": 0.0015,
                  "necking_region":0.375,
                  "element_size": element_size,
                  "mesh_method":3,
                  "grip_contact_length":1}

    tension_model = RoundUniaxialTensionModel(sierra_material, **geo_params)            
    tension_model.set_name("tension_model")
    tension_model.add_boundary_condition_data(down_selected_tension_data)
    tension_model.set_allowable_load_drop_factor(0.70)
    tension_model.set_boundary_condition_scale_factor(1.5)

    my_wcid = "fy220213"
    if is_sandia_cluster():
      tension_model.run_in_queue(my_wcid, 1)
      tension_model.continue_when_simulation_fails()
      platform = get_sandia_computing_platform()
      num_cores = platform.get_processors_per_node()
    else:
      num_cores = 8
    tension_model.set_number_of_cores(num_cores)

    top_hat_data_collection = BatchDataImporter("ductile_failure_aluminum_6061_data/" 
                                                  "top_hat_shear/processed_data/cleaned_*.csv").batch
    for state, state_data_list in top_hat_data_collection.items():
        for index, data in enumerate(state_data_list):
            max_load_arg = np.argmax(data["load"])
            data = data[data["time"] < data["time"][max_load_arg]]
            data = data[data["load"] > 0.005]
            top_hat_data_collection[state][index] = data[data["displacement"] < 0.02]
    top_hat_data_collection.remove_field("time")

    top_hat_geo_params = {"total_height":1.25,
            "base_height":0.75,
            "trapezoid_angle": 10.0,
            "top_width": 0.417*2,
            "base_width": 1.625, 
            "base_bottom_height": (0.75-0.425),
            "thickness":0.375, 
            "external_radius": 0.05,
            "internal_radius": 0.05,
            "hole_height": 0.3,
            "lower_radius_center_width":0.390*2,
            "localization_region_scale":0.0,
            "element_size":0.005, 
            "numsplits":1}

    top_hat_model = TopHatShearModel(sierra_material, **top_hat_geo_params)
    top_hat_model.set_name('top_hat_shear')
    top_hat_model.set_allowable_load_drop_factor(0.05)
    top_hat_model.add_boundary_condition_data(top_hat_data_collection)
    top_hat_model.set_number_of_cores(num_cores*2)
    if is_sandia_cluster():
      top_hat_model.run_in_queue(my_wcid, 1)
      top_hat_model.continue_when_simulation_fails()

    tension_objective = CurveBasedInterpolatedObjective("engineering_strain", "engineering_stress")
    tension_objective.set_name("engineering_stress_strain_obj")
    top_hat_objective = CurveBasedInterpolatedObjective("displacement", "load")
    top_hat_objective.set_name("load_displacement_obj")

    RT_calibrated_params = matcal_load("anisotropy_parameters.serialized")
    yield_stress = Parameter("yield_stress", 15, 50, 
            RT_calibrated_params.pop("yield_stress"))
    hardening = Parameter("hardening", 0, 60, 
            RT_calibrated_params.pop("hardening"))
    b = Parameter("b", 10, 40,
            RT_calibrated_params.pop("b"))
    R22 = Parameter("R22", 0.8, 1.15, 
            RT_calibrated_params["R22"])
    R33 = Parameter("R33", 0.8, 1.15, 
            RT_calibrated_params["R33"])
    R12 = Parameter("R12", 0.8, 1.15, 
            RT_calibrated_params["R12"])
    R23 = Parameter("R23", 0.8, 1.15, 
            RT_calibrated_params["R23"])
    R31 = Parameter("R31", 0.8, 1.15,
            RT_calibrated_params["R31"])

    pc = ParameterCollection("uncertain_params", yield_stress, hardening, b)

    high_temp_calibrated_params = matcal_load("temperature_dependent_parameters.serialized")
    tension_model.add_constants(**high_temp_calibrated_params,
                                **RT_calibrated_params)
    top_hat_model.add_constants(**high_temp_calibrated_params,
                                **RT_calibrated_params)

    results = matcal_load("laplace_study_results.joblib")








.. GENERATED FROM PYTHON SOURCE LINES 158-161

After importing laplace study results, we can 
sample parameters sets from the estimated parameter
uncertainties using :func:`~matcal.core.parameter_studies.sample_multivariate_normal`.

.. GENERATED FROM PYTHON SOURCE LINES 161-168

.. code-block:: Python

    num_samples = 50
    uncertain_parameter_sets = sample_multivariate_normal(num_samples, 
                                                          results.mean.to_list(),
                                                          results.fitted_parameter_covariance, 
                                                          seed=1234, 
                                                          param_names=pc.get_item_names())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /gpfs/knkarls/projects/matcal_devel/matcal/core/parameter_studies.py:901: RuntimeWarning: covariance is not symmetric positive-semidefinite.
      except: # old python e.g. 3.7




.. GENERATED FROM PYTHON SOURCE LINES 169-172

Now we set up a study so we can 
visualize the results by pushing the samples back through the models.
We do so using a MatCal :class:`~matcal.core.parameter_studies.ParameterStudy`.

.. GENERATED FROM PYTHON SOURCE LINES 172-181

.. code-block:: Python

    param_study = ParameterStudy(pc)
    param_study.add_evaluation_set(tension_model, tension_objective, down_selected_tension_data)
    param_study.add_evaluation_set(top_hat_model, top_hat_objective, top_hat_data_collection)
    param_study.set_core_limit(250)
    param_study.set_working_directory("UQ_sampling_study", remove_existing=True)
    params_to_evaluate = zip(uncertain_parameter_sets["yield_stress"],
                             uncertain_parameter_sets["hardening"],
                             uncertain_parameter_sets["b"])








.. GENERATED FROM PYTHON SOURCE LINES 182-195

Next, we add parameter evaluations for each of the samples. 
We do so by organizing the data using Python's
``zip`` function and then loop over the result
to add each parameter set sample to the study.

.. Warning::
   We add error catching to the addition of each parameter 
   evaluation. There is a chance that parameters could be 
   generated outside of our original bounds and we want the study to complete.
   If this error is caught, we will see it in the MatCal output 
   and know changes are needed. However, some results will still be output
   and can be of use.


.. GENERATED FROM PYTHON SOURCE LINES 195-209

.. code-block:: Python

    valid_runs = 0
    for params in params_to_evaluate:
        y_eval    = params[0]
        A_eval    = params[1]
        b_eval    = params[2]
 
        try:
          param_study.add_parameter_evaluation(yield_stress=y_eval, hardening=A_eval,b=b_eval)
          print(f"Running evaluation {params}")
          valid_runs +=1                         
        except ValueError:
           print(f"Skipping evaluation with {params}. Parameters out of range. ")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Skipping evaluation with (60.69797240107448, 7.500434013541572, -52.47612004060188). Parameters out of range. 
    Running evaluation (44.07777321991281, 11.350513716324016, 19.56789664844877)
    Skipping evaluation with (59.77171582716707, 5.573262559582343, -47.14406898088955). Parameters out of range. 
    Running evaluation (39.54605343110171, 13.617433341953461, 26.5859287312661)
    Skipping evaluation with (52.78661936087509, 7.990381048995915, -22.13329865765799). Parameters out of range. 
    Skipping evaluation with (67.43349301353955, 5.787008005987213, -74.8379876673375). Parameters out of range. 
    Running evaluation (36.61597497144453, 14.542335221877105, 33.460425308169086)
    Skipping evaluation with (36.6111509419563, 11.057457305037728, 44.449842235373225). Parameters out of range. 
    Skipping evaluation with (36.569113641899605, 12.639380032321085, 41.248411659548516). Parameters out of range. 
    Running evaluation (42.104372094262395, 12.423968064152717, 12.909142646021238)
    Skipping evaluation with (29.5810991148354, 14.26815641925278, 67.02258615044957). Parameters out of range. 
    Skipping evaluation with (68.2871808591507, 6.39988582410584, -89.16060574334959). Parameters out of range. 
    Skipping evaluation with (55.36953877995385, 10.669256371563849, -40.07050998698469). Parameters out of range. 
    Skipping evaluation with (43.15053966437757, 13.229007536418997, 1.7750204642162757). Parameters out of range. 
    Skipping evaluation with (47.630932041181204, 8.350747366369937, 0.9554512883403152). Parameters out of range. 
    Skipping evaluation with (25.35535809620862, 15.774502632040193, 77.1227935327993). Parameters out of range. 
    Running evaluation (39.97245835902828, 10.30201672597732, 34.28852461328188)
    Running evaluation (36.1289464335037, 13.640296965742946, 39.00202143071671)
    Skipping evaluation with (26.702028289121902, 13.826504028100727, 80.87741707421817). Parameters out of range. 
    Skipping evaluation with (12.752115088368896, 20.576149632362593, 126.29825582976319). Parameters out of range. 
    Running evaluation (38.12561986600198, 12.935806910053122, 32.99062312114583)
    Skipping evaluation with (46.08719236635739, 9.416501776270115, 6.411801103204913). Parameters out of range. 
    Skipping evaluation with (57.10310349487871, 8.233430715140173, -34.716678979558736). Parameters out of range. 
    Skipping evaluation with (47.25040822113145, 8.244202527586875, 7.971026459206201). Parameters out of range. 
    Skipping evaluation with (28.55286691144944, 13.995291476347107, 76.6293496162849). Parameters out of range. 
    Skipping evaluation with (32.39102809348789, 15.275768896695627, 50.504091346061706). Parameters out of range. 
    Skipping evaluation with (57.79717414481443, 10.715040139679871, -51.9777121970965). Parameters out of range. 
    Skipping evaluation with (46.470807637146805, 9.445728879897194, 7.152011246016739). Parameters out of range. 
    Skipping evaluation with (56.17216640916261, 5.109892283271432, -17.27187771866302). Parameters out of range. 
    Running evaluation (42.2380452911066, 12.393374528158168, 19.8473126103762)
    Skipping evaluation with (49.21521810996259, 8.30948929961988, 0.39885627488313347). Parameters out of range. 
    Skipping evaluation with (58.819823569978084, 7.209942159481205, -40.6472837052733). Parameters out of range. 
    Running evaluation (39.518367665952596, 11.69106404026709, 35.53893070646238)
    Skipping evaluation with (51.86017808152326, 6.502900717100381, -6.189814036902101). Parameters out of range. 
    Skipping evaluation with (32.75293389806615, 16.545112033714652, 46.010753383340145). Parameters out of range. 
    Skipping evaluation with (35.22877782748134, 14.49354277236981, 41.900790170502944). Parameters out of range. 
    Running evaluation (39.77028740679799, 11.31102205747298, 33.83609984978275)
    Skipping evaluation with (48.747264203042775, 9.404778490143826, -9.928812871522867). Parameters out of range. 
    Running evaluation (42.849995768231665, 12.71841471272473, 13.444978510565416)
    Skipping evaluation with (29.51555472952239, 13.21717162498855, 67.5668091525443). Parameters out of range. 
    Running evaluation (36.521970661620635, 14.770401881404666, 33.457865198083574)
    Running evaluation (39.74238163717077, 13.253461419932497, 18.57171498478901)
    Skipping evaluation with (37.56725954397998, 10.050754155546258, 47.877397254108). Parameters out of range. 
    Running evaluation (39.118240757182114, 13.116180654163731, 25.719564753788475)
    Skipping evaluation with (61.2559825935969, 7.115378825042032, -55.31483607539827). Parameters out of range. 
    Skipping evaluation with (46.70235919220539, 10.379173525571561, 0.21416767659715852). Parameters out of range. 
    Skipping evaluation with (29.304802078810543, 15.083129635645454, 67.17520562716226). Parameters out of range. 
    Skipping evaluation with (33.704500351676415, 13.724094788225134, 51.97887181926332). Parameters out of range. 
    Skipping evaluation with (63.00870521883044, 7.835972449116559, -61.55838706153457). Parameters out of range. 
    Running evaluation (40.897720135972506, 10.876573484971429, 29.151359639057603)




.. GENERATED FROM PYTHON SOURCE LINES 210-212

Next, we launch the study and plot the results.
We use functions to simplify the plotting processes.

.. GENERATED FROM PYTHON SOURCE LINES 212-241

.. code-block:: Python

    if valid_runs > 0:
        param_study_results = param_study.launch()
    else:
        exit()

    def compare_data_and_model(data, model_responses, indep_var, dep_var, 
                               plt_func=plt.plot, fig_label=None):
        if fig_label is not None:
            fig = plt.figure(fig_label)
        else:
            fig = None
        data.plot(indep_var, dep_var, plot_function=plt_func, ms=3, labels="data", 
                figure=fig, marker='o', linestyle='-', color="#bdbdbd", show=False)
        model_responses.plot(indep_var, dep_var, plot_function=plt_func,labels="models", 
                          figure=fig, linestyle='-', alpha=0.5)

    all_tension_data = tension_data_collection
    all_tension_data = scale_data_collection(all_tension_data, 
                                                      "engineering_stress", 1000)
    all_sim_tension_data = param_study_results.simulation_history[tension_model.name]
    compare_data_and_model(all_tension_data, 
                           all_sim_tension_data, 
                           "engineering_strain", "engineering_stress")

    all_top_hat_sim_data =param_study_results.simulation_history[top_hat_model.name]
    compare_data_and_model(top_hat_data_collection, 
                           all_top_hat_sim_data, 
                           "displacement", "load")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_001.png
         :alt: temperature_5.330700e+02_direction_R11
         :srcset: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_002.png
         :alt: temperature_5.330700e+02_direction_R22
         :srcset: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_003.png
         :alt: temperature_5.330700e+02_direction_R33
         :srcset: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_004.png
         :alt: direction_R23
         :srcset: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_005.png
         :alt: direction_R12
         :srcset: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_006.png
         :alt: direction_R31
         :srcset: /advanced_examples/6061T6_anisotropic_calibration/images/sphx_glr_plot_6061T6_i_uq_validation_parameter_study_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 242-254

In the plots, the simulation results for the simulated samples
does not match the variation in the 
data sets in the areas where the data were used for calibration, and 
seem to be a poor representation of the uncertainty. Also,
many of the parameter samples were rejected due to being out of bounds indicating
an unacceptable results.
A potential alternative uncertainty quantification option, 
that is more computationally expensive, is to do data resampling. With data resampling, 
random data sets for each model are chosen and the models are calibrated to this
random selection. This is repeated for many sample selections. After many calibrations
are completed, a population of valid parameter sets are obtained and can be used 
as the uncertain parameter distributions for the parameters.  


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (14 minutes 24.195 seconds)


.. _sphx_glr_download_advanced_examples_6061T6_anisotropic_calibration_plot_6061T6_i_uq_validation_parameter_study.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_6061T6_i_uq_validation_parameter_study.ipynb <plot_6061T6_i_uq_validation_parameter_study.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_6061T6_i_uq_validation_parameter_study.py <plot_6061T6_i_uq_validation_parameter_study.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_6061T6_i_uq_validation_parameter_study.zip <plot_6061T6_i_uq_validation_parameter_study.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
