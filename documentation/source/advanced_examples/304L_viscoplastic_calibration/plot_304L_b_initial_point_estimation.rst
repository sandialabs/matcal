
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced_examples/304L_viscoplastic_calibration/plot_304L_b_initial_point_estimation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_examples_304L_viscoplastic_calibration_plot_304L_b_initial_point_estimation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_examples_304L_viscoplastic_calibration_plot_304L_b_initial_point_estimation.py:


304L bar calibration initial point estimation
---------------------------------------------
In this example, we estimate an initial point for our full finite element
model calibration to data 
from :cite:p:`laser_weld_paper`. 
We will use MatFit on the ASTME8 tension data to provide the initial point for the 
next example, 
:ref:`304L stainless steel viscoplastic calibration`.

.. note::
    Useful Documentation links:

    #. :ref:`Running MatFit`

First, import all needed tools. 
We will be using tools from NumPy, 
MatPlotLib, MatFit and MatCal for this 
example.

.. GENERATED FROM PYTHON SOURCE LINES 21-32

.. code-block:: Python

    import numpy as np
    from matcal import *
    from matfit.models import Voce
    from matfit.fitting import MatFit
    import matplotlib.pyplot as plt

    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')
    plt.rc('font', size=12)
    figsize = (4,3)








.. GENERATED FROM PYTHON SOURCE LINES 33-35

We import the data using the 
:class:`~matcal.core.data_importer.BatchDataImporter`

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: Python

    tension_data = BatchDataImporter("ductile_failure_ASTME8_304L_data/*.dat", 
                                        file_type="csv").batch








.. GENERATED FROM PYTHON SOURCE LINES 39-47

To use MatFit, we need to extract certain quantities of interest (QoIs)
from each engineering stress strain curve. We need 
the yield stress, ultimate stress, strain at ultimate stress and 
the elongation strain for each test. We extract those from the 
:class:`~matcal.core.data.DataCollection` below and store each
QoI set in a list to be used with MatFit. We use NumPy and
MatCal's :class:`~matcal.core.data_analysis.determine_pt2_offset_yield`
to determine these QoIs from the data.

.. GENERATED FROM PYTHON SOURCE LINES 47-59

.. code-block:: Python

    qoi_sets = []
    steel_elastic_mod = 29e3
    for state, data_sets in tension_data.items():
        for data in data_sets:
            yield_pt = determine_pt2_offset_yield(data, steel_elastic_mod)
            yield_stress = yield_pt[1]
            ultimate_stress = np.max(data["engineering_stress"])
            argmax = np.argmax(data["engineering_stress"])
            strain_at_ultimate = data["engineering_strain"][argmax]
            elongation_strain = np.max(data["engineering_strain"])
            qoi_sets.append([yield_stress, ultimate_stress, strain_at_ultimate, elongation_strain])








.. GENERATED FROM PYTHON SOURCE LINES 60-70

Next, we write a function that will take those QoIs and provide
an estimate for a Voce material model :cite:p:`voce1948relationship` using MatFit.
The function returns the Voce material parameters of 
saturation stress (:math:`A`) and Voce exponent (:math:`b`) in a solution dictionary. 
Since we already have an estimate for the yield, we will only be calibrating 
:math:`A` and :math:`b` with MatFit. MatFit requires specific formatting 
of input parameters. See the MatFit documentation for more information
:cite:p:`matfit`. The bounds for our two calibrated parameters are estimated
from the stress-strain curves and previous experience with the model 
for austenitic stainless steels.

.. GENERATED FROM PYTHON SOURCE LINES 70-90

.. code-block:: Python

    def get_voce_params(yield_stress, ultimate_stress, strain_at_ultimate, elongation_strain):
        material_specification = dict(
            ultimate_strength = ultimate_stress,
            strain_at_ultimate = strain_at_ultimate,
            elongation = elongation_strain,
            yield_stress = yield_stress,
            youngs_modulus=steel_elastic_mod,
            poissons_ratio=0.27,
            density=7.41e-4)

        voce_parameters = dict(
            hardening_modulus=dict(value=200, lower=0, upper=1e3, calibrate=True),
            exponential_coefficient=dict(value=2.0, lower=0.0, upper=5, calibrate=True),
            )
        voce_model = Voce(material_specification, voce_parameters, name='Voce')
        MF = MatFit(voce_model)
        MF.fit(solver_settings=dict(method='trf'))
        solution = MF.get_solution()
        return solution








.. GENERATED FROM PYTHON SOURCE LINES 91-94

Next, we write another function to take the QoIs and calculate our 
Voce material parameters. We will store those in a dictionary for 
further analysis.

.. GENERATED FROM PYTHON SOURCE LINES 94-102

.. code-block:: Python

    voce_params = {"Ys":[], "As":[], "bs":[]}
    for qoi_set in qoi_sets:
        voce_params["Ys"].append(qoi_set[0])
        solution = get_voce_params(*qoi_set)

        voce_params["As"].append(solution['hardening_modulus'])
        voce_params["bs"].append(solution['exponential_coefficient'])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'ultimate_strength': Data(84.07199899), 'strain_at_ultimate': 0.619835, 'elongation': Data(0.789549), 'yield_stress': 32.25690309030112, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002
    {'ultimate_strength': Data(83.4860623), 'strain_at_ultimate': 0.666751, 'elongation': Data(0.801673), 'yield_stress': 31.778833058762395, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002
    {'ultimate_strength': Data(83.38864318), 'strain_at_ultimate': 0.62209, 'elongation': Data(0.855288), 'yield_stress': 31.41117205738219, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002
    {'ultimate_strength': Data(83.19837909), 'strain_at_ultimate': 0.645916, 'elongation': Data(0.791821), 'yield_stress': 31.236284728200893, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002
    {'ultimate_strength': Data(83.96771346), 'strain_at_ultimate': 0.568989, 'elongation': Data(0.830619), 'yield_stress': 33.30904540520916, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002
    {'ultimate_strength': Data(84.32342826), 'strain_at_ultimate': 0.555085, 'elongation': Data(0.814481), 'yield_stress': 33.383401774459486, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002
    {'ultimate_strength': Data(84.34824576), 'strain_at_ultimate': 0.578079, 'elongation': Data(0.81299), 'yield_stress': 33.517787207559174, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002
    {'ultimate_strength': Data(84.56332736), 'strain_at_ultimate': 0.565082, 'elongation': Data(0.808276), 'yield_stress': 34.029358835664695, 'youngs_modulus': 29000.0, 'poissons_ratio': 0.27, 'density': 0.000741, 'hardening_modulus': {'value': 200, 'lower': 0, 'upper': 1000.0, 'calibrate': True}, 'exponential_coefficient': {'value': 2.0, 'lower': 0.0, 'upper': 5, 'calibrate': True}}
    Missing parameter: hardening_model
    Using parameters default value: hardening_model | voce
    Missing parameter: yield_strength_offset
    Using parameters default value: yield_strength_offset | 0.002




.. GENERATED FROM PYTHON SOURCE LINES 103-106

First, we make histograms of each parameter. 
We want to ensure the parameters are as expected and 
try to understand the cause of any multi-modal behavior.

.. GENERATED FROM PYTHON SOURCE LINES 106-122

.. code-block:: Python

    figsize=[4,3]
    plt.figure("Ys", figsize, constrained_layout=True)
    plt.hist(voce_params["Ys"], density=True, alpha=0.8)
    plt.xlabel("Y (ksi)")
    plt.ylabel("PDF")

    plt.figure("As", figsize, constrained_layout=True)
    plt.hist(voce_params["As"], density=True, alpha=0.8)
    plt.xlabel("A (Ksi)")
    plt.ylabel("PDF")

    plt.figure("bs", figsize, constrained_layout=True)
    plt.hist(voce_params["bs"], density=True, alpha=0.8)
    plt.xlabel("b")
    plt.ylabel("PDF")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_001.png
         :alt: plot 304L b initial point estimation
         :srcset: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_002.png
         :alt: plot 304L b initial point estimation
         :srcset: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_003.png
         :alt: plot 304L b initial point estimation
         :srcset: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(18.926410511363635, 0.5, 'PDF')



.. GENERATED FROM PYTHON SOURCE LINES 123-129

From these plots there is some slight grouping. However, 
the parameter values are not spread out over a large range 
indicating MatFit has provided a good initial guess for the parameters. 
We can plot the data collection and verify that two groupings of the data are 
present. We do this with MatCal's :meth:`~matcal.core.data.DataCollection.plot`
method for :class:`~matcal.core.data.DataCollection` objects.

.. GENERATED FROM PYTHON SOURCE LINES 129-136

.. code-block:: Python

    tension_fig = plt.figure("data", (5,4), constrained_layout=True)
    tension_data.plot("engineering_strain", "engineering_stress", 
                      figure=tension_fig, labels='ASTME8 data', 
                      color="#bdbdbd")
    plt.xlabel("engineering strain")
    plt.ylabel("engineering stress (ksi)")




.. image-sg:: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_004.png
   :alt: plot 304L b initial point estimation
   :srcset: /advanced_examples/304L_viscoplastic_calibration/images/sphx_glr_plot_304L_b_initial_point_estimation_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(20.771400166044003, 0.5, 'engineering stress (ksi)')



.. GENERATED FROM PYTHON SOURCE LINES 137-147

In this plot, two groupings of the data can be seen since there are two 
groups with different elongation strains. This verifies the 
results seen in the histograms. Since these tension specimens were 
extracted from a large diameter bar, the different groupings likely 
correspond to extraction location and the resulting groupings in stress-strain
behavior are expected.

Since we are ignoring any material inhomogeneity for this calibration, 
we will take the average of all calculated values and save that 
as the initial point for our full finite element model calibration.

.. GENERATED FROM PYTHON SOURCE LINES 147-154

.. code-block:: Python

    voce_initial_point = {}
    voce_initial_point["Y_0"] = np.average(voce_params["Ys"])
    voce_initial_point["A"] = np.average(voce_params["As"])
    voce_initial_point["b"] = np.average(voce_params["bs"])

    print(voce_initial_point)
    matcal_save("voce_initial_point.serialized", voce_initial_point)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'Y_0': 32.61534826969239, 'A': 173.15419453381776, 'b': 1.9386756344331433}





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.092 seconds)


.. _sphx_glr_download_advanced_examples_304L_viscoplastic_calibration_plot_304L_b_initial_point_estimation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_304L_b_initial_point_estimation.ipynb <plot_304L_b_initial_point_estimation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_304L_b_initial_point_estimation.py <plot_304L_b_initial_point_estimation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_304L_b_initial_point_estimation.zip <plot_304L_b_initial_point_estimation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
